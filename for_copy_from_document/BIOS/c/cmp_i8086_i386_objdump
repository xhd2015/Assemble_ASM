#D <!DOCTYPE xgen>
<section>
<pre>
Comparing the same codes disassembled by denoting two architecture:
======original code
  
</pre>
	.file "just.c"
#APP
        .code16

#NO_APP
        .text
        .globl  main
        .type   main, @function
main:
.LFB0:
        .cfi_startproc
        pushl   %ebp
        .cfi_def_cfa_offset 8
        .cfi_offset 5, -8
        movl    %esp, %ebp
        .cfi_def_cfa_register 5
        movl    $0, %eax
        popl    %ebp
        .cfi_restore 5
        .cfi_def_cfa 4, 4
        ret
        .cfi_endproc
.LFE0:
        .size   main, .-main
        .ident  "GCC: (GNU) 6.2.1 20160916 (Red Hat 6.2.1-2)"
        .section        .note.GNU-stack,"",@progbits
=============by 'objdump -D -m i386 -M intel -b binary just.com'
just.com:     file format binary


Disassembly of section .data:

00000000 <.data>:
   0:	66 55                	push   bp
   2:	66 89 e5             	mov    bp,sp
   5:	66 b8 00 00          	mov    ax,0x0
   9:	00 00                	add    BYTE PTR [eax],al
   b:	66 5d                	pop    bp
   d:	c3                   	ret    

==========by 'objdump -D -m i8086 -M intel -b binary just.com'
just.com:     file format binary


Disassembly of section .data:

00000000 <.data>:
   0:	66 55                	push   ebp
   2:	66 89 e5             	mov    ebp,esp
   5:	66 b8 00 00 00 00    	mov    eax,0x0
   b:	66 5d                	pop    ebp
   d:	c3                   	ret    

=============
=============
=============
The actul version executed by DOS is the latter one,e.g -m i8086.
This is related to the topic we discussed <xgen reference="usual/diff_code16_32">The difference between .code16 and .code32</xgen>.
As a natural result or hypothesis,i8086 was an abbrevation to .code16,while i386 to .code32.
What needed to clarify is that,the -m option does not stand for architecture instruction set,it just indicates that the code should be interpreted as 16 bit by default.
This -m option differs from the option used by as,if I do not understand wrongly.

</section>
