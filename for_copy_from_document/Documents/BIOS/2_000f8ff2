===Reference:000f9705
000f8fdb: (                    ): jnz .+21                  ; 7515






000f8ff2: (                    ): lea bx, word ptr ss:[bp-30] ; 8d5ee2
000f8ff5: (                    ): push bx                   ; 53
000f8ff6: (                    ): call .-31336              ; e89885
000f8ff9: (                    ): inc sp                    ; 44
000f8ffa: (                    ): inc sp                    ; 44
000f8ffb: (                    ): mov ax, word ptr ss:[bp-30] ; 8b46e2
000f8ffe: (                    ): jmp .+281                 ; e91901
000f9001: (                    ): mov ax, word ptr ss:[bp-30] ; 8b46e2
000f9004: (                    ): cmp ax, 0x0002            ; 3d0200
000f9007: (                    ): jnz .+4                   ; 7504
000f9009: (                    ): mov al, 0x80              ; b080
000f900b: (                    ): jmp .+2                   ; eb02
000f900d: (                    ): xor al, al                ; 30c0
000f900f: (                    ): mov byte ptr ss:[bp-5], al ; 8846fb
000f9012: (                    ): mov ax, 0x07c0            ; b8c007
==========================at here,set 0x7c0
000f9015: (                    ): mov word ptr ss:[bp-8], ax ; 8946f8
000f9018: (                    ): xor ax, ax                ; 31c0
000f901a: (                    ): mov word ptr ss:[bp-12], ax ; 8946f4
000f901d: (                    ): push bp                   ; 55
000f901e: (                    ): mov bp, sp                ; 89e5
000f9020: (                    ): push ax                   ; 50
000f9021: (                    ): push bx                   ; 53
000f9022: (                    ): push cx                   ; 51
000f9023: (                    ): push dx                   ; 52
000f9024: (                    ): mov dl, byte ptr ss:[bp+27] ; 8a561b
000f9027: (                    ): mov ax, word ptr ss:[bp+24] ; 8b4618
000f902a: (                    ): mov es, ax                ; 8ec0
000f902c: (                    ): xor bx, bx                ; 31db
000f902e: (                    ): mov ah, 0x02              ; b402
000f9030: (                    ): mov al, 0x01              ; b001
000f9032: (                    ): mov ch, 0x00              ; b500
000f9034: (                    ): mov cl, 0x01              ; b101
000f9036: (                    ): mov dh, 0x00              ; b600
000f9038: (                    ): int 0x13                  ; cd13
==============read disk ,ah=0x02 read sectors from drive .<a href="https://en.wikipedia.org/wiki/INT_13H">Reference</a>, al=0x01 one sector in count  dl/ch/dh/cl=Drive : CHS. ES:BX-->the buffer.  
	Return .  CF if error.AH return code,AL actual sectors read.
000f903a: (                    ): jnb .+6                   ; 7306
000f903c: (                    ): mov ax, 0x0001            ; b80100
000f903f: (                    ): mov word ptr ss:[bp+20], ax ; 894614
000f9042: (                    ): pop dx                    ; 5a
000f9043: (                    ): pop cx                    ; 59
000f9044: (                    ): pop bx                    ; 5b
000f9045: (                    ): pop ax                    ; 58
000f9046: (                    ): pop bp                    ; 5d
000f9047: (                    ): mov ax, word ptr ss:[bp-12] ; 8b46f4
000f904a: (                    ): test ax, ax               ; 85c0
000f904c: (                    ): jz .+17                   ; 7411
000f904e: (                    ): mov ax, 0x0001            ; b80100
000f9051: (                    ): push ax                   ; 50
000f9052: (                    ): push word ptr ss:[bp-30]  ; ff76e2
000f9055: (                    ): call .-31204              ; e81c86
000f9058: (                    ): add sp, 0x0004            ; 83c404
000f905b: (                    ): mov sp, bp                ; 89ec
000f905d: (                    ): pop bp                    ; 5d
000f905e: (                    ): ret                       ; c3
000f905f: (                    ): mov ax, word ptr ss:[bp-30] ; 8b46e2
000f905f: (                    ): mov ax, word ptr ss:[bp-30] ; 8b46e2
000f9062: (                    ): cmp ax, 0x0001            ; 3d0100
000f9065: (                    ): jnz .+15                  ; 750f
000f9067: (                    ): mov ax, 0x0038            ; b83800
000f906a: (                    ): push ax                   ; 50
000f906b: (                    ): call .+29952              ; e80075
000f906e: (                    ): inc sp                    ; 44
000f906f: (                    ): inc sp                    ; 44
000f9070: (                    ): and al, 0x01              ; 2401
000f9072: (                    ): test al, al               ; 84c0
000f9074: (                    ): jnz .+34                  ; 7522
000f9076: (                    ): push word ptr ss:[bp-8]   ; ff76f8
000f9079: (                    ): mov ax, 0x01fe            ; b8fe01
000f907c: (                    ): push ax                   ; 50
000f907d: (                    ): call .+30061              ; e86d75
000f9080: (                    ): add sp, 0x0004            ; 83c404
000f9083: (                    ): cmp ax, 0xaa55            ; 3d55aa
===================  Check the boot flag , 0xAA55
000f9086: (                    ): jz .+16                   ; 7410
000f9088: (                    ): xor ax, ax                ; 31c0
000f908a: (                    ): push ax                   ; 50
000f908b: (                    ): push word ptr ss:[bp-30]  ; ff76e2
000f908e: (                    ): call .-31261              ; e8e385
000f9091: (                    ): add sp, 0x0004            ; 83c404
000f9094: (                    ): mov sp, bp                ; 89ec
000f9096: (                    ): pop bp                    ; 5d
000f9097: (                    ): ret                       ; c3
==================  If Flag=0xAA55 , goes to below
000f9098: (                    ): mov ax, word ptr ss:[bp-8] ; 8b46f8
000f909b: (                    ): and ax, 0x0fff            ; 25ff0f
000f909e: (                    ): mov cl, 0x04              ; b104
000f90a0: (                    ): shl ax, cl                ; d3e0
000f90a2: (                    ): mov word ptr ss:[bp-10], ax ; 8946f6
000f90a5: (                    ): mov ax, word ptr ss:[bp-8] ; 8b46f8
000f90a8: (                    ): and ax, 0xf000            ; 2500f0
000f90ab: (                    ): mov word ptr ss:[bp-8], ax ; 8946f8
000f90ae: (                    ): jmp .+133                 ; e98500
================  To 0xf000:0x9136
000f90b1: (                    ): call .-23058              ; e8eea5
000f90b4: (                    ): mov word ptr ss:[bp-12], ax ; 8946f4
000f90b7: (                    ): mov al, byte ptr ss:[bp-12] ; 8a46f4
000f90ba: (                    ): test al, al               ; 84c0
000f90bc: (                    ): jz .+25                   ; 7419
000f90be: (                    ): push word ptr ss:[bp-12]  ; ff76f4
000f90c1: (                    ): call .-31210              ; e81686
000f90c4: (                    ): inc sp                    ; 44
000f90c5: (                    ): inc sp                    ; 44
000f90c6: (                    ): mov ax, 0x0001            ; b80100
000f90c9: (                    ): push ax                   ; 50
000f90ca: (                    ): push word ptr ss:[bp-30]  ; ff76e2
000f90cd: (                    ): call .-31324              ; e8a485
000f90d0: (                    ): add sp, 0x0004            ; 83c404
000f90d3: (                    ): mov sp, bp                ; 89ec
000f90d5: (                    ): pop bp                    ; 5d
000f90d6: (                    ): ret                       ; c3
000f90d7: (                    ): mov ax, word ptr ss:[bp-12] ; 8b46f4
000f90da: (                    ): mov al, ah                ; 88e0
000f90dc: (                    ): xor ah, ah                ; 30e4
000f90de: (                    ): mov byte ptr ss:[bp-5], al ; 8846fb
000f90e1: (                    ): push word ptr ss:[bp-2]   ; ff76fe
000f90e4: (                    ): mov ax, 0x0266            ; b86602
000f90e7: (                    ): push ax                   ; 50
000f90e8: (                    ): call .+29954              ; e80275
000f90eb: (                    ): add sp, 0x0004            ; 83c404
000f90ee: (                    ): mov word ptr ss:[bp-8], ax ; 8946f8
000f90f1: (                    ): xor ax, ax                ; 31c0
000f90f3: (                    ): mov word ptr ss:[bp-10], ax ; 8946f6
000f90f6: (                    ): jmp .+62                  ; eb3e
000f90f8: (                    ): mov ax, word ptr ss:[bp-26] ; 8b46e6
000f90fb: (                    ): mov bx, word ptr ss:[bp-24] ; 8b5ee8
000f90fe: (                    ): xchg bx, ax               ; 93
000f90ff: (                    ): xor bx, bx                ; 31db
000f9101: (                    ): mov word ptr ss:[bp-8], ax ; 8946f8
000f9104: (                    ): mov ax, 0xffff            ; b8ffff
000f9107: (                    ): xor bx, bx                ; 31db
000f9109: (                    ): lea di, word ptr ss:[bp-26] ; 8d7ee6
000f910c: (                    ): call .+28541              ; e87d6f
000f910f: (                    ): mov word ptr ss:[bp-10], ax ; 8946f6
000f9112: (                    ): jmp .+34                  ; eb22
000f9114: (                    ): mov sp, bp                ; 89ec
000f9114: (                    ): mov sp, bp                ; 89ec
000f9116: (                    ): pop bp                    ; 5d
000f9117: (                    ): ret                       ; c3
000f9118: (                    ): jmp .+28                  ; eb1c
000f911a: (                    ): sub ax, 0x0001            ; 2d0100
000f911d: (                    ): jz .-288                  ; 0f84e0fe
000f9121: (                    ): sub ax, 0x0001            ; 2d0100
000f9124: (                    ): jz .-295                  ; 0f84d9fe
000f9128: (                    ): sub ax, 0x0001            ; 2d0100
000f912b: (                    ): jz .-126                  ; 0f8482ff
000f912f: (                    ): sub ax, 0x007d            ; 2d7d00
000f9132: (                    ): jz .-60                   ; 74c4
000f9134: (                    ): jmp .-34                  ; ebde
000f9136: (                    ): push word ptr ss:[bp-10]  ; ff76f6
000f9139: (                    ): push word ptr ss:[bp-8]   ; ff76f8
000f913c: (                    ): mov bx, 0xcce1            ; bbe1cc
000f913f: (                    ): push bx                   ; 53
000f9140: (                    ): mov ax, 0x0004            ; b80400
000f9143: (                    ): push ax                   ; 50
000f9144: (                    ): call .+30691              ; e8e377
=====================		No output
000f9147: (                    ): add sp, 0x0008            ; 83c408
000f914a: (                    ): mov bp, sp                ; 89e5
000f914c: (                    ): push cs                   ; 0e
000f914d: (                    ): push 0x96d2               ; 68d296
000f9150: (                    ): pushf                     ; 9c
=================== start looking from here : it says 'pushf'
in 386 real mode,in the very beginning,
	sp=ffd6
afterwards:
	sp=ffd4  #flags is 16-bit
000f9151: (                    ): mov ax, word ptr ss:[bp+22] ; 8b4616
000f9154: (                    ): push ax                   ; 50
===================  ax = 0. The segment of 0x0:0x7c00 is 0,which is pushed at first
000f9155: (                    ): mov ax, word ptr ss:[bp+20] ; 8b4614
000f9158: (                    ): push ax                   ; 50
==================== ax = 0x7c00
000f9159: (                    ): mov ax, 0xaa55            ; b855aa
000f915c: (                    ): mov dl, byte ptr ss:[bp+25] ; 8a5619
000f915f: (                    ): xor bx, bx                ; 31db
000f9161: (                    ): mov ds, bx                ; 8edb
000f9163: (                    ): mov es, bx                ; 8ec3
000f9165: (                    ): mov bp, bx                ; 89dd
===================== Set ds,es,bp to 0, initialize
000f9167: (                    ): iret                      ; cf
===================== Goes iret, then the next is at 0x7c0:0
Let's see what iret does.
Stack: 
	[]
	[]
	[]
sp-->	[]
in real mode,when iret happens,it pops
cs(16)
ip(16)
flags(16)
=== far return and pop flags , in the ordered sequence given above

	[]
	[]
	[]
	[]
<a href="http://docs.oracle.com/cd/E19455-01/806-3773/instructionset-75/index.html">Oracle Reference</a>
As real mode is not always 16-bit,there may be some confusing.see <a href="http://intel80386.com/386htm/c16.htm">80386 Reference</a>
In our boot.s program,we should see as ax=0xaa55,which is set here.And we know ip=0x7c00.The same reason.
And exploring this will give us a hint that,ss is not saved ,it is 0.its value is 0x0,sp is often 0xffd0.This indicates that,we use the default stack locating at the first segment.
000f9168: (                    ): mov sp, bp                ; 89ec
000f916a: (                    ): pop bp                    ; 5d
000f916b: (                    ): ret                       ; c3




